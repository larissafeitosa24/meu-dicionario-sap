import streamlit as st
import pandas as pd
from sentence_transformers import SentenceTransformer, util

st.set_page_config(page_title="Dicion√°rio SAP Inteligente", page_icon="ü§ñ")
st.title("ü§ñ Dicion√°rio de Transa√ß√µes SAP")
st.write("Pesquise em linguagem natural e veja a transa√ß√£o SAP correspondente.")

# -----------------------------
# CONFIGURA√á√ïES
# -----------------------------
arquivo_base = "transacoes_sap.xlsx"
modelo = SentenceTransformer("all-MiniLM-L6-v2")  # modelo leve e r√°pido
threshold = 0.60 # nota de corte minima de similaridade

# -----------------------------
# CARREGAR PLANILHA
# -----------------------------
@st.cache_data
def carregar_excel():
    df = pd.read_excel(arquivo_base)
    df.columns = df.columns.str.strip().str.lower()

    if "descri√ß√£o" not in df.columns or "c√≥digo" not in df.columns:
        st.error("‚ùå A planilha deve conter as colunas 'Descri√ß√£o' e 'C√≥digo'.") # testa pra verificar se a planilha est√° ok
        return None

    df = df.dropna(subset=["descri√ß√£o", "c√≥digo"])
    df["descri√ß√£o"] = df["descri√ß√£o"].astype(str).str.strip()
    df["c√≥digo"] = df["c√≥digo"].astype(str).str.strip()
    return df

df = carregar_excel()

# -----------------------------
# EXPANDIR DESCRI√á√ïES (v√≠rgulas viram v√°rias instru√ß√µes)
# -----------------------------
def expandir_descricoes(df):
    descricoes, codigos = [], []
    for _, row in df.iterrows():
        partes = [d.strip() for d in str(row["descri√ß√£o"]).split(",")]
        for desc in partes:
            if desc:  # ignora vazio
                descricoes.append(desc.lower())
                codigos.append(row["c√≥digo"])
    return descricoes, codigos

# -----------------------------
# EMBEDDINGS
# -----------------------------
@st.cache_resource
def preparar_embeddings(df):
    descricoes, codigos = expandir_descricoes(df)
    embeddings = modelo.encode(descricoes, convert_to_tensor=True)
    return descricoes, codigos, embeddings

if df is not None:
    descricoes, codigos, embeddings = preparar_embeddings(df)

    # -----------------------------
    # CAMPO DE BUSCA
    # -----------------------------
    consulta = st.text_input("O que voc√™ deseja fazer?")

    if consulta:
        consulta_emb = modelo.encode(consulta, convert_to_tensor=True)

        # Calcular similaridade
        scores = util.cos_sim(consulta_emb, embeddings)[0]
        top_k = min(5, len(descricoes))  # mostrar at√© 5 melhores
        resultados = sorted(
            zip(descricoes, codigos, scores),
            key=lambda x: x[2],
            reverse=True
        )[:top_k]

    melhor_score = float(resultados[0][2]) if resultados else 0

    if melhor_score < threshold: 
        st.error("‚ùå Nenhuma transa√ß√£o correspondente encontrada.")
        st.warning (
                f"""
                Base utilizada : **{"transacoes_sap.xlsx"}
                Para adicionar uma nova transa√ß√£o :
                1. Edite a planilha que est√° salva aqui : 'https://github.com/larissafeitosa24/meu-dicionario-sap'
                2. Inclua uma nova linha com :
                - **Descri√ß√£o**( palavras-chave separada por virgula)
                - **C√≥digo SAP**
                3. Salve e recarregue o app
                """
            )

    else :
        st.info(f"üîé Resultados para: **{consulta}**")
        for desc, cod, score in resultados:
            st.write(f"- {desc} ‚Üí **{cod}**  (confian√ßa: {score:.2f})")
